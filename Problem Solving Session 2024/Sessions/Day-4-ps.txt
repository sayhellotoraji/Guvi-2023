WAP to compute factorial of a number using Recursion:
input:5
Output:120

Solution:
Condition->Base->
0!->1
1!->1
n==0||n==1->return 1


Recursive->n=5
   product of natural number->1*2*3*4*6
n*fact(n-1)->
5*fact(4)->5*4*fact(3)->5*4*3*fact(2)->5*4*3*2*fact(1)->
5*4*3*2*1*fact(0)->5*4*3*2*1*1->120 output

Code Solution:
package com.problemsolving;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();//5
		int res=fact(n);//recursively
		System.out.println(res);
	
	}
	
	//recursive call
	static int fact(int n) {
		if(n==0) {
			return 1;
		}else {
			return  n*fact(n-1);
		}
		
	}

}

WAP to find the nth term in fibonacci series using recursion.
Note->First 2 term in series are 0 and 1 res.
input:
4
output:
2

input:
6
output:
5
Fibonacci->
it series which we get by adding previous 2 number
0 1 1 2 3 5 8 13 21---------n

base condtion->
n==1->return->0
n==2->return->1
if(n==1||n==2){
return n-1
}

recursive condition->
return->fib(n-1)+fib(n-2)

Solu:
package com.problemsolving;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();//5
		int res=fibo(n);//recursively
		System.out.println(res);
	
	}
	
	//recursive call
	static int fibo(int n) {
		if(n==1||n==2) {
			return n-1;
		}else {
			return fibo(n-1)+fibo(n-2);
		}
	}

}


Q.WAP to find the sum of digit of number using recursion.
input:
432
output:
9

base->
num==0->return->n
num%10+fun(num/10)->
2+fun(43)->2+3+fun(4)->2+3+4+0->9

Solution:
package com.problemsolving;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();//5
		int res=fun(n);//recursively
		System.out.println(res);
	
	}
	
	//recursive call
	static int fun(int n) {
		if(n==0) {
			return n;
		}else {
			return (n%10)+fun(n/10);//recursive
		}
	}

}




Q.WAP to find the number of digit in number using recursion.
input:
432
output
3

input:
123
output:
3

Base condition->
counter=0;
n==0->return->counter

fun(n/10)->return->counter++;

package com.problemsolving;

import java.util.Scanner;

public class Main {

	static int counter=0;
	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();//5
		int res=fun(n);//recursively
		System.out.println(res);
	
	}
	
	//recursive call
	static int fun(int n) {
		if(n==0) {
			return counter;
		}else {
			fun(n/10);
			return ++counter;
		}
	}

}

Q.You are given list of integers.Your task is to find the sum
all elements in the list.
Collection-List interface and ArrayList

input:
5
1 2 3 4 5
Output:
15


package com.problemsolving;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

	static int counter=0;
	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		List<Integer> nums=new ArrayList<>();
		int n=sc.nextInt();//5
		for(int i=0;i<n;i++) {
			nums.add(sc.nextInt());
		}
		
		//logic
		int sum=0;
		for(int num:nums) {
			sum+=num;
		}
		
		System.out.println(sum);
	
	}
	


}


Q.You are given list of Strings.Your task is to find
the length of longest string in list.

input:
5
apple banana kiwi orange strawberry

output:
10

Code:
package com.problemsolving;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

	static int counter=0;
	public static void main(String[] args) {
		//create scanner class object
		Scanner sc=new Scanner(System.in);
		List<String> strings=new ArrayList<>();
		int n=sc.nextInt();//5
		for(int i=0;i<n;i++) {
			strings.add(sc.next());
		}
		
		//logic
		int maxlength=0;
		for(String str:strings) {
			maxlength=Math.max(maxlength, str.length());
		}
		
		System.out.println(maxlength);
	
	}
	


}


Q.









next()->read a string word
nextLine()->reads complete line untill reaches to next line














