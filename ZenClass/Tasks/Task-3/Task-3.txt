			OOPS

Task 3: 29-10-23
Name: Rajasekar T
Batch:  JFS_WD2

Qn 1.  Book Management System using 2 classes
	a. Library class
	b. Book class

Github: BookManagementSystem.java contains main method - Driver code


Code:

import java.util.Scanner;

// Class Book
class Book {

    // Attributes
    private int bookID;
    private String title;
    private String author;
    private String isAvailable;

    // Parameterised Constructor
    Book(int bookID, String title, String author, String isAvailable) {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isAvailable = isAvailable;
    }

    // Getter & Setter Methods
    public int getBookID() {
        return bookID;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsAvailable() {
        return isAvailable;
    }

    public void setBookID(int bookID) {
        this.bookID = bookID;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public void setIsAvailable(String isAvailable) {
        this.isAvailable = isAvailable;
    }
}

class Library {
    private Book[] books;

    // count - maintains number of different books in Library
    private int count = 0;

    // Create an array of Books
    public Library(int no_of_books) {
        this.books = new Book[no_of_books];
    }

    public Book[] getBooks() {
        return books;
    }

    public void setBooks(Book[] books) {
        this.books = books;
    }

    // a. Method to add book to the books array
    public void addBook(Book book) {
        this.getBooks()[count++] = book;
    }

    // b. Method to Seach a book in the library
    public int searchBook(int bookID) {

        Book books[] = this.getBooks();
        int flag = -1;
        for (int i = 0; i < books.length; i++) {
            if (books[i].getBookID() == bookID) {
                flag = i;
                break;
            }
        }
        return flag;
    }

    // c Remove books when the searched bookID is found
    public void removeBook(int search_index) {
        books[search_index] = null;
        this.count = this.count - 1;
        System.out.println("Book Removed. ");
    }

    // Replace method - Optional Not mentioned in Question
    public void replace(int search_index, String new_Title, String new_Author) {
        
        // Replace the book name & author of the given book
        // from the books
        books[search_index].setTitle(new_Title);
        books[search_index].setAuthor(new_Author);

        System.out.println("Book Replaced");
    }

    // d. Method to display all Books in the library
    public void displayAllBooks() {
        Book[] books = this.getBooks();
        int no_of_books = this.getBooks().length;
        System.out.println("\nEntire Book Details");

        for (int i = 0; i < no_of_books; i++) {
            if (books[i] != null) {
                System.out.println("Book ID         :  " + books[i].getBookID());
                System.out.println("Book Title      :  " + books[i].getTitle());
                System.out.println("Book Author     :  " + books[i].getAuthor());
                System.out.println("Book Availability: " + books[i].getIsAvailable());
                System.out.println("");
            }
        }
    }

}

public class BookManagementSystem {
    public static void main(String args[]) {

        // Library operations
        // a. Add Books
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of books: ");
        int no_of_books = Integer.parseInt(sc.nextLine());

        Library library = new Library(no_of_books);

        for (int i = 0; i < no_of_books; i++) {
            System.out.println("Enter Book " + (i + 1) + " Details");
            System.out.println("Enter Book ID");
            int bookID = Integer.parseInt(sc.nextLine());

            System.out.println("Enter Book Title");
            String title = sc.nextLine();

            System.out.println("Enter Book Author");
            String author = sc.nextLine();

            // Initially Book Availability is Set to Yes
            String isAvailable = "Yes";

            library.addBook(new Book(bookID, title, author, isAvailable));
            System.out.println("");

        }

        
        // b. Search Book operation
        System.out.println("Enter Book Id to Search: ");
        int search_bookId = Integer.parseInt(sc.nextLine());
        int search_index = library.searchBook(search_bookId);


        // c. Remove Book Operation only if the
        // searched book is available
        if (search_index >= 0) {
            System.out.println("Book with BookID " + search_bookId + " Found");
            library.removeBook(search_index);
        } 
        
        else {
            System.out.println("\nBook with BookID " + search_bookId + " Not found");
            System.out.println("\n--->  So Cannot be Removed. ");
        }

        // d. Display All Books
        library.displayAllBooks();

        sc.close();
    }
}




Input & Output:
--------------------------------------------------
Enter number of books: 
3
Enter Book 1 Details
Enter Book ID
1000
Enter Book Title
OCAJP
Enter Book Author
Jeanne Boyarsky

Enter Book 2 Details
Enter Book ID
3500                 
Enter Book Title
HeadFirst Design Pattern
Enter Book Author
Eric Freeman

Enter Book 3 Details
Enter Book ID
5000
Enter Book Title
Harry Potter
Enter Book Author
JK Rowling

Enter Book Id to Search:
1000
Book with BookID 1000 Found
Book Removed.

Entire Book Details
Book ID         :  3500
Book Title      :  HeadFirst Design Pattern
Book Author     :  Eric Freeman
Book Availability: Yes

Book ID         :  5000
Book Title      :  Harry Potter
Book Author     :  JK Rowling
Book Availability: Yes



----------------------------------------------------------------------------------------------------------------------------------

Qn 2. Taxable Interface Problem
	Employee Class - Find Income Tax
	Product Class - Product Price after Tax
	Taxation class - Driver Code


Code:

import java.util.Scanner;

// Complete Abstraction - Concept Used
interface Taxable {
    double salesTax = 7;
    double incomeTax = 10.5;

    double calcTax();
}

class Employee implements Taxable {
    private int empID;
    private String name;
    private double salary;

    Employee(int empID, String name, double salary) {
        this.empID = empID;
        this.name = name;
        this.salary = salary;
    }

    // Getters and Setters
    public int getEmpID() {
        return empID;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void setEmpID(int empID) {
        this.empID = empID;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public double calcTax() {
        double salary = this.getSalary();

        // Salary after Tax deductions
        double salary_after_tax = salary - (salary * (Taxable.incomeTax / 100));
        return salary_after_tax;
    }
}

class Product implements Taxable {

    private int pid;
    private double price;
    private int quantity;

    Product(int pid, double price, int quantity) {
        this.pid = pid;
        this.price = price;
        this.quantity = quantity;
    }

    public int getPid() {
        return pid;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setPid(int pid) {
        this.pid = pid;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public double calcTax() {
        double price = this.getPrice();
        int quantity = this.getQuantity();

        // Price after Tax for a single unit/ quantity
        double price_after_tax = price + (price * (Taxable.salesTax / 100));

        // Total Price = Price after tax * quantity
        double total_price = price_after_tax * quantity;
        return total_price;
    }
}

// Driver code 
public class Taxation {
    public static void main(String[] args) {
        System.out.println("Taxable Interface Problem");
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Employee Id: ");
        int empID = Integer.parseInt(sc.nextLine());

        System.out.println("Enter Employee Name: ");
        String name = sc.nextLine();

        System.out.println("Enter Employee Salary: ");
        double salary = Double.parseDouble(sc.nextLine());

        // Create Employee Object
        Employee emp1 = new Employee(empID, name, salary);

        System.out.println("Salary after Tax - " + Taxable.incomeTax + "%: " + emp1.calcTax());

        System.out.println("-----------------------------------");
        
        /***************************************************** */

        
        System.out.println("\nEnter Product Id: ");
        int pid = Integer.parseInt(sc.nextLine());

        System.out.println("Enter Product Price: ");
        double price = Double.parseDouble(sc.nextLine());

        System.out.println("Enter Product Quantity: ");
        int quantity = Integer.parseInt(sc.nextLine());

        // Create Product object
        Product prod1 = new Product(pid, price, quantity);

        System.out.println("Product Price after Tax- " + Taxable.salesTax + "% : " + prod1.calcTax());

        sc.close();
    }
}





Input & Output:

Taxable Interface Problem
Enter Employee Id: 
2105
Enter Employee Name: 
Rajasekar T
Enter Employee Salary: 
1000000
Salary after Tax - 10.5%: 895000.0
-----------------------------------

Enter Product Id:
369
Enter Product Price:
1000
Enter Product Quantity:
100
Product Price after Tax- 7.0% : 107000.0

